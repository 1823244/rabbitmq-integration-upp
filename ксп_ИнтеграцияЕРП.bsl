//++  Подготовка файла json с Банковскими счетами и выгрузка
Процедура ВыгрузитьБанковскийСчет() Экспорт
	
	Узел = ПланыОбмена.ксп_Обмен_УПП_ЕРП.НайтиПоНаименованию("Интеграция_УПП_ERP");
	
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаИзменения.Ссылка,
	|	БанковскиеСчетаИзменения.Ссылка.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаИзменения.Ссылка.Владелец КАК Владелец,
	|	БанковскиеСчетаИзменения.Ссылка.ТекстКорреспондента КАК ТекстКорреспондента,
	|	БанковскиеСчетаИзменения.Ссылка.Банк КАК Банк,
	|	БанковскиеСчетаИзменения.Ссылка.БанкДляРасчетов КАК БанкДляРасчетов,
	|	БанковскиеСчетаИзменения.Ссылка.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	БанковскиеСчетаИзменения.Ссылка.ВидСчета КАК ВидСчета
	|ИЗ
	|	Справочник.БанковскиеСчета.Изменения КАК БанковскиеСчетаИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО БанковскиеСчетаИзменения.Ссылка = БанковскиеСчета.Ссылка
	|ГДЕ
	|	БанковскиеСчетаИзменения.Узел = &Узел
	|	И БанковскиеСчетаИзменения.Ссылка.ЭтоГруппа = ЛОЖЬ
	|	И (БанковскиеСчета.ВидСчета = ""Расчетный""
	|			ИЛИ БанковскиеСчета.ВидСчета = ""Депозитный"")
	|	И ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) = ТИП(Справочник.Контрагенты)";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатБанковскийСчет = Запрос.Выполнить();
	
	ВыборкаБанковскийСчет = РезультатБанковскийСчет.Выбрать();
	
	Если НЕ РезультатБанковскийСчет.Пустой() Тогда
		
		ПодключениеКRabbitMQ();
		
		Пока ВыборкаБанковскийСчет.Следующий() Цикл
			
			ТипОбъекта = ВыборкаБанковскийСчет.Ссылка.Метаданные().ПолноеИмя();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ТипОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаБанковскийСчет.Ссылка);

			НачатьТранзакцию();
			
			Попытка
				Блокировка.Заблокировать();
			Исключение
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецПопытки;

			
			Попытка
				
			json = ВыгрузитьБанковскийСчетСервер(ВыборкаБанковскийСчет);
			
			SendToRabbitOneObject(json, "Справочник.БанковскиеСчета");
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ВыборкаБанковскийСчет.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
			Исключение
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецПопытки;
						
		КонецЦикла;
		
		мКлиентРэббит = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьБанковскийСчетСервер(Обк)
		
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("source", "UPP");
	СтруктураОбъекта.Вставить("type", Обк.Ссылка.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("logmoment", XMLстрока(ТекущаяДата()));
	
	identification = СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	
	definition = СоздатьУзелDefinition(Обк.Ссылка);
	
	//НомерСчета
	definition.Вставить("НомерСчета", Обк.НомерСчета); //Строка
	
	//ВидСчета
	definition.Вставить("ВидСчета", обк.ВидСчета); //Строка
	
	//ТекстКорреспондента
	definition.Вставить("ТекстКорреспондента", обк.ТекстКорреспондента); // Строка
	
	#Область Банк
	Банк = СоздатьУзелDefinition(Обк.Банк); //Перечисление
	definition.Вставить("Банк", Банк);
	#КонецОбласти

	#Область ГоловнаяОрганизация
	БанкДляРассчетов = СоздатьУзелDefinition(Обк.БанкДляРасчетов); // Справочник
	definition.Вставить("БанкДляРассчетов", БанкДляРассчетов);
	#КонецОбласти
	
	#Область СтранаРегистрации
	Валюта = СоздатьУзелIdentification(Обк.ВалютаДенежныхСредств); // Справочник
	definition.Вставить("Валюта", Валюта);
	#КонецОбласти
		
	//------------------------------------------------------
	
	СтруктураОбъекта.Вставить("definition", definition);
		
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();               
	
	Возврат json;

	
	
КонецФункции
//-- Банковский счет

//++ Подготовка файла json с контрагентами и выгрузка 
Процедура ВыгрузитьКонтрагента() Экспорт
	
	Узел = ПланыОбмена.ксп_Обмен_УПП_ЕРП.НайтиПоНаименованию("Интеграция_УПП_ERP");
	
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыИзменения.Ссылка,
	|	КонтрагентыИзменения.Ссылка.ИНН КАК ИНН,
	|	КонтрагентыИзменения.Ссылка.КПП КАК КПП,
	|	КонтрагентыИзменения.Ссылка.КодПоОКПО КАК КодПоОКПО,
	|	КонтрагентыИзменения.Ссылка.НаименованиеПолное КАК НаименованиеПолное,
	|	КонтрагентыИзменения.Ссылка.Покупатель КАК Покупатель,
	|	КонтрагентыИзменения.Ссылка.Поставщик КАК Поставщик,
	|	КонтрагентыИзменения.Ссылка.ЮрФизЛицо КАК ЮрФизЛицо,
	|	КонтрагентыИзменения.Ссылка.НеЯвляетсяРезидентом КАК НеЯвляетсяРезидентом,
	|	КонтрагентыИзменения.Ссылка.Ответственный КАК Ответственный,
	|	КонтрагентыИзменения.Ссылка.Родитель КАК Родитель,
	|	КонтрагентыИзменения.Ссылка.Страна КАК Страна,
	|	КонтрагентыИзменения.Ссылка.ДатаГосРегистрации КАК ДатаГосРегистрации,
	|	КонтрагентыИзменения.Ссылка.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
	|	КонтрагентыИзменения.Ссылка.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ИЗ
	|	Справочник.Контрагенты.Изменения КАК КонтрагентыИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО КонтрагентыИзменения.Ссылка = Контрагенты.Ссылка
	|ГДЕ
	|	КонтрагентыИзменения.Узел = &Узел
	|	И КонтрагентыИзменения.Ссылка.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатКонтрагент = Запрос.Выполнить();
		
	ВыборкаКонтрагент = РезультатКонтрагент.Выбрать();
	
	Если НЕ РезультатКонтрагент.Пустой() Тогда
		
		ПодключениеКRabbitMQ();
		
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			ТипОбъекта = ВыборкаКонтрагент.Ссылка.Метаданные().ПолноеИмя();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ТипОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаКонтрагент.Ссылка);

			НачатьТранзакцию();
			
			Попытка
				Блокировка.Заблокировать();
			Исключение
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецПопытки;

			Попытка
				
			json = ВыгрузитьКонтрагентаСервер(ВыборкаКонтрагент);
						
			SendToRabbitOneObject(json, "Справочник.Контрагенты");
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ВыборкаКонтрагент.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
			Исключение
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецПопытки;
					
		КонецЦикла;
		
		мКлиентРэббит = Неопределено;

	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьКонтрагентаСервер(Обк)
		
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("source", "UPP");
	СтруктураОбъекта.Вставить("type", Обк.Ссылка.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("logmoment", XMLстрока(ТекущаяДата()));
	
	identification = СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	
	definition = СоздатьУзелDefinition(Обк.Ссылка);
	
	//Наименование полное
	definition.Вставить("НаименованиеПолное", обк.НаименованиеПолное); // Строка
	
	//ИНН	
	definition.Вставить("ИНН", обк.ИНН); // Строка
	
	//КПП
	definition.Вставить("КПП", обк.КПП); // Строка
	
	definition.Вставить("Группа", Строка(обк.Родитель));
	
	//Обособленное подразеление
	definition.Вставить("ОбособленноеПодразделение", обк.ОбособленноеПодразделение); // Булево
	
	//Код по ОКПО
	definition.Вставить("КодПоОКПО", обк.КодПоОКПО); // Строка
	
	//Покупатель
	definition.Вставить("Покупатель", Обк.Покупатель); // Булево
	
	//Поставщик
	definition.Вставить("Поставщик", обк.Поставщик); // Булево
	
	//Не резидент
	definition.Вставить("НеРезидент", обк.НеЯвляетсяРезидентом); // Булево
	
	//Дата гос. регистрации
	definition.Вставить("Date", обк.ДатаГосРегистрации); // Дата
	
	#Область ЮрФизЛицо
	ЮрФизЛицо = СоздатьУзелIdentification(Обк.ЮрФизЛицо); // Перечисление
	definition.Вставить("ЮрФизЛицо", ЮрФизЛицо);
	#КонецОбласти
		
	#Область Страна
	Страна = СоздатьУзелDefinition(обк.Страна); // Справочник
	definition.Вставить("Страна",Страна);
	#КонецОбласти
	
	#Область ГоловнойКонтрагент
	ГоловнойКонтрагент = СоздатьУзелIdentification(обк.ГоловнойКонтрагент); // Справочник
	definition.Вставить("ГоловнойКонтрагент", ГоловнойКонтрагент);
	#КонецОбласти
	
	#Область Менеджер
	Менеджер = СоздатьУзелIdentification(Обк.Ответственный); // Справочник
	definition.Вставить("Менеджер", Менеджер);
	#КонецОбласти
								
	//------------------------------------------------------
	
	СтруктураОбъекта.Вставить("definition", definition);
		
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();               
	
	Возврат json;

	
	
КонецФункции
//-- Контрагент

//++ Подготовка файла json с договорами контрагентов и выгрузка 
Процедура ВыгрузитьДоговор() Экспорт
	
	Узел = ПланыОбмена.ксп_Обмен_УПП_ЕРП.НайтиПоНаименованию("Интеграция_УПП_ERP");
	
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентовИзменения.Ссылка,
	|	ДоговорыКонтрагентовИзменения.Ссылка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДоговорыКонтрагентовИзменения.Ссылка.Владелец КАК Владелец,
	|	ДоговорыКонтрагентовИзменения.Ссылка.ТипЦен КАК ТипЦен,
	|	ДоговорыКонтрагентовИзменения.Ссылка.Дата КАК Дата,
	|	ДоговорыКонтрагентовИзменения.Ссылка.Номер КАК Номер,
	|	ДоговорыКонтрагентовИзменения.Ссылка.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	ДоговорыКонтрагентовИзменения.Ссылка.СрокДействия КАК СрокДействия,
	|	ДоговорыКонтрагентовИзменения.Ссылка.ВидДоговора КАК ВидДоговора,
	|	ДоговорыКонтрагентовИзменения.Ссылка.Организация КАК Организация,
	|	ДоговорыКонтрагентовИзменения.Ссылка.Ответственный КАК Ответственный,
	|	ДоговорыКонтрагентовИзменения.Ссылка.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ДоговорыКонтрагентовИзменения.Ссылка.НеИспользуется КАК НеИспользуется
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.Изменения КАК ДоговорыКонтрагентовИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ДоговорыКонтрагентовИзменения.Ссылка = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентовИзменения.Узел = &Узел
	|	И ДоговорыКонтрагентовИзменения.Ссылка.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатДоговорКонтрагента = Запрос.Выполнить();
		
	ВыборкаДоговор = РезультатДоговорКонтрагента.Выбрать();
	
	Если НЕ РезультатДоговорКонтрагента.Пустой() Тогда
		
		ПодключениеКRabbitMQ();
		
		Пока ВыборкаДоговор.Следующий() Цикл
			
			ТипОбъекта = ВыборкаДоговор.Ссылка.Метаданные().ПолноеИмя();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ТипОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДоговор.Ссылка);

			НачатьТранзакцию();
			
			Попытка
				Блокировка.Заблокировать();
			Исключение
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецПопытки;

			Попытка
				
			json = ВыгрузитьДоговорКонтрагентаСервер(ВыборкаДоговор);
			
			SendToRabbitOneObject(json, "Справочник.ДоговорыКонтрагентов");
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ВыборкаДоговор.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
			Исключение
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецПопытки;
			
		КонецЦикла;
		
		мКлиентРэббит = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьДоговорКонтрагентаСервер(Обк)
		
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("source", "UPP");
	СтруктураОбъекта.Вставить("type", Обк.Ссылка.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("logmoment", XMLстрока(ТекущаяДата()));
	
	identification = СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	
	definition = СоздатьУзелDefinition(Обк.Ссылка);
	
	//Учет агнетского НДС
	definition.Вставить("УчетАгентскогоНДС", Обк.УчетАгентскогоНДС); // Булево
	
	//Дата	
	definition.Вставить("Date", Обк.Дата); // Дата
	
	//Номер
	definition.Вставить("Номер", Обк.Номер); // Строка
	
	//Срок действия договора
	definition.Вставить("Период", Обк.СрокДействия); // Дата
	
	//Договор не используется
	definition.Вставить("НеИспользуется", обк.НеИспользуется); // Булево
	
	#Область Контрагент
	Контрагент = СоздатьУзелIdentification(обк.Владелец); // Справочник
	definition.Вставить("Контрагент", Контрагент);
	#КонецОбласти
	
	#Область Организация
	Организация = СоздатьУзелIdentification(Обк.Организация); // Справочник
	definition.Вставить("Организация", Организация);
	#КонецОбласти	
	
	#Область ВидДоговора
	ВидДоговора = СоздатьУзелIdentification(Обк.ВидДоговора); // Перечисление
	definition.Вставить("ВидДоговора", ВидДоговора);
	#КонецОбласти
	
	#Область ТипЦен
	Если Обк.ТипЦен <> Неопределено Тогда
		
		ТипЦен = СоздатьУзелIdentification(Обк.ТипЦен); // Справочник
		definition.Вставить("ТипЦен", ТипЦен);
		
	КонецЕсли;
	#КонецОбласти	
	
	#Область Ответственный
	Ответственный = СоздатьУзелIdentification(Обк.Ответственный); // Справочник
	definition.Вставить("Ответственный", Ответственный);
	#КонецОбласти
	
	#Область ВалютаВзаиморасчётов
	Валюта = СоздатьУзелIdentification(Обк.ВалютаВзаиморасчетов); // Справочник
	definition.Вставить("Валюта", Валюта);
	# КонецОбласти
	
	#Область ВедениеВзаиморасчетов
	ВедениеВзаиморасчетов = СоздатьУзелIdentification(Обк.ВедениеВзаиморасчетов); // Перечисление
	definition.Вставить("ВедениеВзаиморасчетов", ВедениеВзаиморасчетов);
	#КонецОбласти
								
	//------------------------------------------------------
	
	СтруктураОбъекта.Вставить("definition", definition);
		
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();               
	
	Возврат json;

	
	
КонецФункции
//-- Договор контрагента

//++ Подготовка файла json с номенклатурой и выгрузка
Процедура ВыгрузитьНоменклатуру() Экспорт
	
	Узел = ПланыОбмена.ксп_Обмен_УПП_ЕРП.НайтиПоНаименованию("Интеграция_УПП_ERP");
		
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураИзменения.Ссылка КАК Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	НоменклатураИзменения.Ссылка.ЭтоГруппа КАК ЭтоГруппа,
	|	НоменклатураИзменения.Ссылка.Артикул КАК Артикул,
	|	НоменклатураИзменения.Ссылка.СтавкаНДС КАК СтавкаНДС,
	|	НоменклатураИзменения.Ссылка.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
	|	НоменклатураИзменения.Ссылка.Капсула КАК Капсула,
	|	НоменклатураИзменения.Ссылка.Сезон КАК Сезон,
	|	НоменклатураИзменения.Ссылка.КодТНВЭД КАК КодТНВЭД,
	|	НоменклатураИзменения.Ссылка.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	НоменклатураИзменения.Ссылка.НаименованиеПолное КАК НаименованиеПолное,
	|	НоменклатураИзменения.Ссылка.Коллекция КАК Коллекция,
	|	НоменклатураИзменения.Ссылка.ПериодВывески КАК ПериодВывески,
	|	НоменклатураИзменения.Ссылка.Производитель КАК Производитель,
	|	НоменклатураИзменения.Ссылка.Коллекция.Проект КАК Проект
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО НоменклатураИзменения.Ссылка = Номенклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО НоменклатураИзменения.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НоменклатураИзменения.Узел = &Узел
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатНоменклатура = Запрос.Выполнить();
			
	ВыборкаНоменклатура = РезультатНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Ссылка");
	
	Если НЕ РезультатНоменклатура.Пустой() Тогда
		
		ПодключениеКRabbitMQ();
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ТипОбъекта = ВыборкаНоменклатура.Ссылка.Метаданные().ПолноеИмя();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ТипОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка",ВыборкаНоменклатура.Ссылка);

			НачатьТранзакцию();
			
			Попытка
				Блокировка.Заблокировать();
			Исключение
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецПопытки;
			
			Попытка
				
				json = ВыгрузитьНоменклатуруСервер(ВыборкаНоменклатура);
				
				SendToRabbitOneObject(json, "Справочник.Номенклатура");
				
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ВыборкаНоменклатура.Ссылка);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецПопытки;
			
		КонецЦикла;
		
		мКлиентРэббит = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьНоменклатуруСервер(Обк)
		
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("source", "UPP");
	СтруктураОбъекта.Вставить("type", Обк.Ссылка.Метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("logmoment", XMLстрока(ТекущаяДата()));
	
	identification = СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	
	definition = СоздатьУзелDefinition(Обк.Ссылка);
		
	Если обк.ЭтоГруппа <> Истина Тогда
		
		#Область КодТНВЭД                    
		КодТНВЭД = СоздатьУзелDefinition(обк.КодТНВЭД); // Справочник
		definition.Вставить("ТНВЭД", КодТНВЭД);
		#КонецОбласти
		
		#Область СтавкаНДС
		СтавкаНДС = СоздатьУзелIdentification(Обк.СтавкаНДС);// Перечисление
		definition.Вставить("СтавкаНДС", СтавкаНДС); 	
		#КонецОбласти
		
		#Область Капсула
		Капсула = СоздатьУзелIdentification(Обк.Капсула);// Справочник
		definition.Вставить("Капсула", Капсула);
		#КонецОбласти
		
		#Область Сезон
		Сезон = СоздатьУзелIdentification(Обк.Сезон);// Справочник
		definition.Вставить("Сезон", Сезон);
		#КонецОбласти
		
		#Область Коллекция
		Коллекция = СоздатьУзелIdentification(Обк.Коллекция);// Справочник
		definition.Вставить("Коллекция", Коллекция);
		#КонецОбласти
		
		#Область Проект
		Проект = СоздатьУзелIdentification(Обк.Проект);// Справочник
		definition.Вставить("Проект", Проект);
		#КонецОбласти
		
		
		#Область ПериодВывески
		ПериодВывески = СоздатьУзелIdentification(Обк.ПериодВывески);// Справочник
		definition.Вставить("ПериодВывески", ПериодВывески);
		#КонецОбласти
		
		#Область ЕдиницаИзмерения
		ЕдиницаИзмерения = СоздатьУзелIdentification(обк.БазоваяЕдиницаИзмерения);// Справочник
		definition.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		#КонецОбласти
		
		#Область Производитель
		Производитель = СоздатьУзелIdentification(обк.Производитель);// Справочник
		definition.Вставить("Производитель", Производитель);
		#КонецОбласти
		
		
		#Область Характеристики
		ВыборкаХар = обк.Выбрать();
		СчетчикХар = 0;
		Пока ВыборкаХар.следующий() Цикл
			СчетчикХар = СчетчикХар + 1;
			Характеристика = СоздатьУзелIdentification(ВыборкаХар.Характеристика); // Справочник
			definition.Вставить("Характеристика_" + СчетчикХар, Характеристика);
		КонецЦикла;
		#КонецОбласти                                                 
		
		//УчетПоСериям
		definition.Вставить("УчетПоСериям", обк.ВестиУчетПоСериям); // Булево
		
		//Артикул	
		definition.Вставить("Артикул", СокрЛП(обк.Артикул)); // Строка
		
		//Полное наименование
		definition.Вставить("НаименованиеПолное", обк.НаименованиеПолное); // Строка
		
	КонецЕсли;
	//------------------------------------------------------
	
	СтруктураОбъекта.Вставить("definition", definition);
		
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();               
	
	Возврат json;


	
	
КонецФункции
//-- Номенклатура

#Область РаботаСRabbit
Процедура ПодключениеКRabbitMQ()
	
	попытка
		
		ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ32", "BITERP", ТипВнешнейКомпоненты.Native);
		
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	мКлиентРэббит = Новый ("AddIn.BITERP.PinkRabbitMQ3");
	
	Настройки = ПланыВидовХарактеристик.ОбщиеНастройки.ПолучитьНастройкиГруппы("НастройкиRabbit");
	
	server = 	Настройки.server;
	port = 		Настройки.port;
	username = 	Настройки.Username;
	password = 	Настройки.password;
	vhost = 	Настройки.vhost;
	
	Попытка
		мКлиентРэббит.Connect(server,port,username,password,vhost);
	Исключение
		т = мКлиентРэббит.getLastError();
		мКлиентРэббит = undefined;
		ВызватьИсключение "Ошибка подключения (метод Connect()): "+т+Символы.ПС+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
		
	
КонецПроцедуры

Процедура SendToRabbitOneObject(json, ТипОбъектаМД) 
	
	ИмяТочкиОбмена = получитьИмяТочкиОбменаПоТипуОбъекта(ТипОбъектаМД);
	RoutingKey = получитьRoutingKeyПоТипуОбъекта(ТипОбъектаМД);
	
	Попытка
		мКлиентРэббит.BasicPublish(ИмяТочкиОбмена, RoutingKey, json, 0, Ложь);
	Исключение
		т = мКлиентРэббит.getLastError();
		мКлиентРэббит = undefined;
		ВызватьИсключение "Ошибка отправки (метод BasicPublish()): "+т+Символы.ПС+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	
КонецПроцедуры

Функция получитьИмяТочкиОбменаПоТипуОбъекта(ТипОбъектаМД)
	
	Возврат "upp";
	
КонецФункции

Функция получитьRoutingKeyПоТипуОбъекта(ТипОбъектаМД)
	
	Возврат  "static";
	
КонецФункции
#КонецОбласти

#Область ЗаполнениеФайлаJson
Функция СоздатьУзелIdentification(СсылкаНаОбъект)
	
	Если СсылкаНаОбъект = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
		Возврат СоздатьУзелIdentification_Перечисления(СсылкаНаОбъект);
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
		Возврат СоздатьУзелIdentification_Справочника(СсылкаНаОбъект);
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
		Возврат СоздатьУзелIdentification_ПВХ(СсылкаНаОбъект);
	
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

Функция СоздатьУзелIdentification_Перечисления(СсылкаНаОбъект)
	
	ОтветСтруктура = Новый Структура;
	ОтветСтруктура.Вставить("type", СсылкаНаОбъект.Метаданные().ПолноеИмя());
	ОтветСтруктура.Вставить("Значение", НайтиЗначениеПеречисленияПоПредставлению(СсылкаНаОбъект));
	ОтветСтруктура.Вставить("Представление", Строка(СсылкаНаОбъект));
	
	Возврат ОтветСтруктура;
	
КонецФункции                                         

Функция СоздатьУзелIdentification_ПВХ(СсылкаНаОбъект) Экспорт
	
	ОтветСтруктура = Новый Структура; 
	мд = СсылкаНаОбъект.метаданные();
	type = мд.ПолноеИмя();	
	ОтветСтруктура.Вставить("type", type);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат ОтветСтруктура;
	КонецЕсли;
	
	ОтветСтруктура.Вставить("Ref", Строка(СсылкаНаОбъект.УникальныйИдентификатор()));
	
	Если мд.Иерархический = Истина Тогда
		ОтветСтруктура.Вставить("isFolder", СсылкаНаОбъект.ЭтоГруппа);
		parent = СоздатьУзелIdentification_Справочника(СсылкаНаОбъект.Родитель);
		ОтветСтруктура.Вставить("Parent", parent);
	Иначе 
		ОтветСтруктура.Вставить("isFolder", false);
	КонецЕсли;
	
	Если мд.ДлинаКода > 0 Тогда
		ОтветСтруктура.Вставить("Code", СсылкаНаОбъект.Код);
	Иначе 
		ОтветСтруктура.Вставить("Code", "");
	КонецЕсли;
		
	
	Возврат ОтветСтруктура;
	
КонецФункции
   
Функция СоздатьУзелIdentification_Справочника(СсылкаНаОбъект)	
	
	ОтветСтруктура = Новый Структура("type,Ref", "", "");
	
	Если СсылкаНаОбъект = Неопределено или СсылкаНаОбъект = null Тогда                          
		Возврат ОтветСтруктура;
	КонецЕсли;

	мд = СсылкаНаОбъект.метаданные();
	type = мд.ПолноеИмя();	
	ОтветСтруктура.type = type;
	
	Если не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат ОтветСтруктура;
	КонецЕсли;
	
	ОтветСтруктура.Ref = Строка(СсылкаНаОбъект.УникальныйИдентификатор());

	Если type = "Справочник.Валюты" Тогда
		ОтветСтруктура.Вставить("currencyCode", СсылкаНаОбъект.Код);	
		ОтветСтруктура.Вставить("currencyName", СокрЛП(СсылкаНаОбъект.Наименование));	
		
	ИначеЕсли type = "Справочник.Капсула" Тогда
		ОтветСтруктура.Вставить("code", СсылкаНаОбъект.код);
		
	ИначеЕсли type = "Справочник.Сезон" Тогда
		ОтветСтруктура.Вставить("code", СсылкаНаОбъект.код);
		
	ИначеЕсли type = "Справочник.Коллекция" Тогда
		ОтветСтруктура.Вставить("code", СсылкаНаОбъект.код);

	ИначеЕсли type = "Справочник.Проекты" Тогда
		ОтветСтруктура.Вставить("code", СсылкаНаОбъект.код);
		ОтветСтруктура.Вставить("Description", СсылкаНаОбъект.Наименование);
		
	ИначеЕсли type = "Справочник.ПериодВывески" Тогда
		ОтветСтруктура.Вставить("code", СсылкаНаОбъект.код);

	ИначеЕсли type = "Справочник.КлассификаторЕдиницИзмерения" Тогда
		ОтветСтруктура.Вставить("code", СсылкаНаОбъект.код);
		
	ИначеЕсли type = "Справочник.Контрагенты" Тогда
		ОтветСтруктура.Вставить("Description", СсылкаНаОбъект.Наименование);
		
	ИначеЕсли type = "Справочник.ХарактеристикиНоменклатуры" Тогда
		ОтветСтруктура.Вставить("Description", СсылкаНаОбъект.Наименование);
		
	ИначеЕсли type = "Справочник.Пользователи" Тогда
		ОтветСтруктура.Вставить("Description", СсылкаНаОбъект.Наименование);
		
	ИначеЕсли type = "Справочник.Организации" Тогда
		ОтветСтруктура.Вставить("Description", СсылкаНаОбъект.Наименование);
		
	ИначеЕсли type = "Справочник.ТипыЦенНоменклатурыКонтрагентов" ИЛИ type = "Справочник.ТипыЦенНоменклатуры" Тогда
		ОтветСтруктура.Вставить("code", СсылкаНаОбъект.Код);
		ОтветСтруктура.Вставить("Description", СсылкаНаОбъект.Наименование);	
		
	КонецЕсли;

	
	Возврат ОтветСтруктура;
	
КонецФункции

Функция СоздатьУзелDefinition(СсылкаНаОбъект) Экспорт
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
		Возврат СоздатьУзелDefinition_Перечисления(СсылкаНаОбъект);
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
		Возврат СоздатьУзелDefinition_Справочника(СсылкаНаОбъект);
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
		Возврат СоздатьУзелDefinition_ПВХ(СсылкаНаОбъект);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СоздатьУзелDefinition_Справочника(СсылкаНаОбъект)
	
	ОтветСтруктура = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат ОтветСтруктура;
	КонецЕсли;
	
	ОтветСтруктура.Вставить("DeletionMark", СсылкаНаОбъект.ПометкаУдаления);
	
	мд = СсылкаНаОбъект.метаданные();
	
	Если мд.ДлинаКода > 0 Тогда
		ОтветСтруктура.Вставить("Code", СсылкаНаОбъект.Код);
	Иначе 
		ОтветСтруктура.Вставить("Code", "");
	КонецЕсли;
		
	Если мд.ДлинаНаименования > 0 Тогда
		ОтветСтруктура.Вставить("Description", СсылкаНаОбъект.Наименование);
	Иначе 
		ОтветСтруктура.Вставить("Description", "");
	КонецЕсли;
		
	Если мд.Владельцы.Количество() > 0 Тогда
		Попытка		
			owner = СоздатьУзелIdentification_Справочника(СсылкаНаОбъект.Владелец);
			ОтветСтруктура.Вставить("Owner", owner);
		Исключение
		    
		КонецПопытки;		
	КонецЕсли;
	
	Если мд.Иерархический = Истина Тогда
		ОтветСтруктура.Вставить("isFolder", СсылкаНаОбъект.ЭтоГруппа);
		parent = СоздатьУзелIdentification_Справочника(СсылкаНаОбъект.Родитель);
		ОтветСтруктура.Вставить("Parent", parent);
	Иначе 
		ОтветСтруктура.Вставить("isFolder", false);
	КонецЕсли;
	
	
	
	Возврат ОтветСтруктура;
	
КонецФункции

Функция СоздатьУзелDefinition_Перечисления(СсылкаНаОбъект) Экспорт
	
	ОтветСтруктура = Новый Структура;
	
	Возврат ОтветСтруктура;
	
КонецФункции

Функция СоздатьУзелDefinition_ПВХ(СсылкаНаОбъект)
	
	ОтветСтруктура = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат ОтветСтруктура;
	КонецЕсли;
	
	ОтветСтруктура.Вставить("DeletionMark", СсылкаНаОбъект.ПометкаУдаления);
	
	Попытка
		ОтветСтруктура.Вставить("Code", СсылкаНаОбъект.Код);
	Исключение
	    ОтветСтруктура.Вставить("Code", "");
	КонецПопытки;
	Попытка
		ОтветСтруктура.Вставить("Description", СсылкаНаОбъект.Наименование);
	Исключение
	    ОтветСтруктура.Вставить("Description", "");
	КонецПопытки;
	
	Возврат ОтветСтруктура;
	
КонецФункции

Функция НайтиЗначениеПеречисленияПоПредставлению(ЗначениеПеречисления)
	
	МД = ЗначениеПеречисления.Метаданные().ЗначенияПеречисления;
	Для каждого Значение Из МД Цикл
		Если Значение.Синоним = Строка(ЗначениеПеречисления) Тогда
			Возврат Значение.Имя;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции
#КонецОбласти



//ЕНС ++ Подготовка файла json со справочником Склады и выгрузка
Процедура ВыгрузитьВсеСклады() Экспорт
	
	Узел = ПланыОбмена.ксп_Обмен_УПП_ЕРП.НайтиПоНаименованию("Интеграция_УПП_ERP");
		
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	спрк.Ссылка КАК Ссылка,
	|	НоменклатураИзменения.Код КАК Код,
	|	НоменклатураИзменения.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Склады КАК спрк";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	РезультатНоменклатура = Запрос.Выполнить();
			
	Если РезультатНоменклатура.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПодключениеКRabbitMQ();

	Выборка = РезультатНоменклатура.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Склады");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка",Выборка.Ссылка);

		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
		КонецПопытки;
		
		Попытка
			
			json = ВыгрузитьНоменклатуруСервер(Выборка);
			
			SendToRabbitOneObject(json, "Справочник.Склады");
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	мКлиентРэббит = Неопределено;
		
КонецПроцедуры

Функция ВыгрузитьСкладСервер(Выборка)
		
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("source", "UPP");
	СтруктураОбъекта.Вставить("type", "Справочник.Склады");
	СтруктураОбъекта.Вставить("logmoment", XMLстрока(ТекущаяДата()));
	
	identification = СоздатьУзелIdentification(Выборка.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	
	definition = СоздатьУзелDefinition(Выборка.Ссылка);
		
	СтруктураОбъекта.Вставить("definition", definition);
		
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();               
	
	Возврат json;
    
	
КонецФункции
//-- Склады




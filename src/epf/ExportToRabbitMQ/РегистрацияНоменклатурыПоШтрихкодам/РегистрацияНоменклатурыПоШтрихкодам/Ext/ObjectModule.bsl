


//Обработчик регл задания - создать его! или добавить этот метод в регл задание по ГУИДам
Процедура ВыполнитьИмпортИРегистрациюНоменклатурыПоШтрихкодуМодуль() Экспорт
	
	ИмяСобытияЖР = "goods.barcode";

	ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Информация,,,
		"Запуск" );
	
	ВремяНач = ТекущаяУниверсальнаяДатаВМиллисекундах();

	мЧтениеJSON = Новый ЧтениеJSON;
	
	ИДСессии = Строка(Новый УникальныйИдентификатор);
	мИДСессии = ИДСессии;
	//ЗаписьЖурналаРегистрации("ИмпортИзERP",УровеньЖурналаРегистрации.Информация,,,"Сессия запущена.ИД "+ИДСессии);
	
	ИмяОчереди	 			= "to-upp-from-erp-goods-barcode";
	
	ПолучаемоеСообщение 	= "";
	ТегСообщения			= 0;
	
	Узел = ксп_ВызовСервера.ПолучитьУзелОбменаИзПараметровСеанса();
	
	Клиент = ПодключениеКRabbitMQ();
	
	КоличествоПолученных = 0;
	
	Попытка
		Потребитель = Клиент.BasicConsume(ИмяОчереди, "", Ложь, Ложь, 0);
	Исключение
		т = Клиент.GetLastError();
		Клиент = Неопределено;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
		"Ошибка получения сообщений. Сессия ИД "+ИДСессии+". Подробности: "+т);
		
		ВызватьИсключение т;
	КонецПопытки; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать Рег.Владелец  как Номенклатура , Рег.Владелец.ВерсияДанных как ВерсияДанных из РЕгистрСведений.Штрихкоды КАК Рег Где Рег.Штрихкод = &ШК";
	
	Пока Клиент.BasicConsumeMessage("", ПолучаемоеСообщение, ТегСообщения, 5000) Цикл          
		
		мЧтениеJSON.УстановитьСтроку(ПолучаемоеСообщение);
		
		тДанные = ПрочитатьJSON(мЧтениеJSON);//массив
		
		ПолучаемоеСообщение = ""; // Обнуляем, чтобы избежать утечку памяти
		
		Для каждого Элемент из тДанные Цикл	
			
			Попытка
				
				//Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент));
				
				Запрос.УстановитьПараметр("ШК", Элемент);
				Рез = Запрос.Выполнить();
				Если Рез.пустой() Тогда
					ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Предупреждение,,,
					"Не найдена номенклатура по штрихкоду "+Элемент+". Тэг сообщения: <"+Строка(ТегСообщения)+">. Сессия ИД "+ИДСессии);
					Продолжить;
				КонецЕсли;
				
				Выборка = Рез.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если ЗначениеЗаполнено(Выборка.ВерсияДанных) Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Номенклатура);
					Иначе
						ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Предупреждение,,,
						"Не найдена номенклатура по гуиду "+Элемент+". Тэг сообщения: <"+Строка(ТегСообщения)+">. Сессия ИД "+ИДСессии);
						Продолжить;
					КонецЕсли;
					
				КонецЦикла;
				
				
			Исключение
				
				т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Ошибка регистрации номенклатуры к обмену. Штрихкод: " + Элемент + ". Тэг сообщения: <"+Строка(ТегСообщения)+">. Сессия ИД "+ИДСессии+". Подробности: "+т);
				Продолжить;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Попытка

			Клиент.BasicAck(ТегСообщения);

			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Информация,,,
				"Получено сообщение с тэгом <"+Строка(ТегСообщения)+">. Сессия ИД "+мИДСессии);
			
		Исключение
							
			т = Клиент.GetLastError();
			Если НЕ ЗначениеЗаполнено(т) Тогда
				// ошибка НЕ в компоненте
				т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
					"Ошибка обработки (Не в PinkRabbitMQ.dll) сообщения с тэгом <"+Строка(ТегСообщения)+">. Сессия ИД "+мИДСессии+". Подробности: "+т);
			Иначе 
				ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
					"Ошибка PinkRabbitMQ.dll при обработке сообщения с тэгом <"+Строка(ТегСообщения)+">. Сессия ИД "+мИДСессии+". Подробности: "+т);
				
				ВызватьИсключение т;
				
			КонецЕсли; 
			
		КонецПопытки; 		
		
		ТегСообщения = 0; // Обнуляем, чтобы избежать утечку памяти 
		
	КонецЦикла;
	
	Клиент.BasicCancel("");
	
	Клиент = Неопределено;
	
	ВремяКон = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Длительность = ВремяКон - ВремяНач;
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Информация,,,
		"Завершение. Длительность = " + строка(Длительность) + " мс" );
	

Конецпроцедуры


Функция ПодключениеКRabbitMQ()
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ32", "BITERP", ТипВнешнейКомпоненты.Native);
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ64", "BITERP", ТипВнешнейКомпоненты.Native);
	КонецЕсли;
		
	КлиентРэббит = Новый ("AddIn.BITERP.PinkRabbitMQ3");
	
	Настройки = ПланыВидовХарактеристик.ОбщиеНастройки.ПолучитьНастройкиГруппы("НастройкиRabbit");
	
	server = 	Настройки.server;
	port = 		Настройки.port;
	username = 	Настройки.Username;
	password = 	Настройки.password;
	vhost = 	Настройки.vhost;
	
	Попытка
		КлиентРэббит.Connect(server,port,username,password,vhost);
	Исключение
		т = КлиентРэббит.GetLastError();
		КлиентРэббит = undefined;
		ВызватьИсключение "Ошибка подключения (метод Connect()): "+т+Символы.ПС+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	//мКлиентРэббит = КлиентРэббит; //глобальная переменная
	
	Возврат КлиентРэббит;
	
КонецФункции
